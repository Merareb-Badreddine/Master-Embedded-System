
FiFO_Circular_Buffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000300  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800048c  08000494  00001494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800048c  0800048c  00001494  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800048c  0800048c  00001494  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800048c  08000494  00001494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800048c  0800048c  0000148c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000490  08000490  00001490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00001494  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004b7  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000293  00000000  00000000  0000197b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000090  00000000  00000000  00001c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000060  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000102b  00000000  00000000  00001d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ab2  00000000  00000000  00002d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003ddc  00000000  00000000  000037dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000075b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000150  00000000  00000000  000075fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  0000774c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000000 	.word	0x20000000
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08000474 	.word	0x08000474

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000004 	.word	0x20000004
 80001c8:	08000474 	.word	0x08000474

080001cc <FIFO_Init>:
#include "FIFO.h"



FIFO_Buf_s FIFO_Init(FIFO_Buf_t* FIFO_Buf , ELEMENT_TYPE* Buffer , uint32_t Length)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b085      	sub	sp, #20
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	60f8      	str	r0, [r7, #12]
 80001d4:	60b9      	str	r1, [r7, #8]
 80001d6:	607a      	str	r2, [r7, #4]
	if (Buffer == NULL || FIFO_Buf == NULL)
 80001d8:	68bb      	ldr	r3, [r7, #8]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d002      	beq.n	80001e4 <FIFO_Init+0x18>
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d101      	bne.n	80001e8 <FIFO_Init+0x1c>
	    return FIFO_NULL;
 80001e4:	2303      	movs	r3, #3
 80001e6:	e011      	b.n	800020c <FIFO_Init+0x40>

	FIFO_Buf->Base   = Buffer;
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	68ba      	ldr	r2, [r7, #8]
 80001ec:	609a      	str	r2, [r3, #8]
	FIFO_Buf->Head   = FIFO_Buf->Base;
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	689a      	ldr	r2, [r3, #8]
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	60da      	str	r2, [r3, #12]
	FIFO_Buf->Tail   = FIFO_Buf->Base;
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	689a      	ldr	r2, [r3, #8]
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	611a      	str	r2, [r3, #16]
	FIFO_Buf->Length = Length;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	687a      	ldr	r2, [r7, #4]
 8000202:	601a      	str	r2, [r3, #0]
	FIFO_Buf->Count  = 0;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	2200      	movs	r2, #0
 8000208:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 800020a:	2300      	movs	r3, #0
}
 800020c:	4618      	mov	r0, r3
 800020e:	3714      	adds	r7, #20
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr

08000218 <FIFO_IsFull>:

FIFO_Buf_s FIFO_IsFull(FIFO_Buf_t* FIFO_Buf)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	if(FIFO_Buf->Base == NULL || FIFO_Buf->Head == NULL || FIFO_Buf->Tail == NULL)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	689b      	ldr	r3, [r3, #8]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d007      	beq.n	8000238 <FIFO_IsFull+0x20>
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	68db      	ldr	r3, [r3, #12]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d003      	beq.n	8000238 <FIFO_IsFull+0x20>
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	691b      	ldr	r3, [r3, #16]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d101      	bne.n	800023c <FIFO_IsFull+0x24>
		return FIFO_NULL;
 8000238:	2303      	movs	r3, #3
 800023a:	e008      	b.n	800024e <FIFO_IsFull+0x36>
	if(FIFO_Buf->Count == FIFO_Buf->Length)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	685a      	ldr	r2, [r3, #4]
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	429a      	cmp	r2, r3
 8000246:	d101      	bne.n	800024c <FIFO_IsFull+0x34>
		return FIFO_FULL;
 8000248:	2301      	movs	r3, #1
 800024a:	e000      	b.n	800024e <FIFO_IsFull+0x36>
	else
		return FIFO_NOT_FULL;
 800024c:	2304      	movs	r3, #4
}
 800024e:	4618      	mov	r0, r3
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr

0800025a <FIFO_IsEmpty>:

FIFO_Buf_s FIFO_IsEmpty(FIFO_Buf_t* FIFO_Buf)
{
 800025a:	b480      	push	{r7}
 800025c:	b083      	sub	sp, #12
 800025e:	af00      	add	r7, sp, #0
 8000260:	6078      	str	r0, [r7, #4]
	if(FIFO_Buf->Base == NULL || FIFO_Buf->Head == NULL || FIFO_Buf->Tail == NULL)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	689b      	ldr	r3, [r3, #8]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d007      	beq.n	800027a <FIFO_IsEmpty+0x20>
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	68db      	ldr	r3, [r3, #12]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d003      	beq.n	800027a <FIFO_IsEmpty+0x20>
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	691b      	ldr	r3, [r3, #16]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d101      	bne.n	800027e <FIFO_IsEmpty+0x24>
		return FIFO_NULL;
 800027a:	2303      	movs	r3, #3
 800027c:	e006      	b.n	800028c <FIFO_IsEmpty+0x32>
	if(FIFO_Buf->Count == 0)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d101      	bne.n	800028a <FIFO_IsEmpty+0x30>
		return FIFO_EMPTY;
 8000286:	2302      	movs	r3, #2
 8000288:	e000      	b.n	800028c <FIFO_IsEmpty+0x32>
	else
		return FIFO_NOT_EMPTY;
 800028a:	2305      	movs	r3, #5
}
 800028c:	4618      	mov	r0, r3
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr

08000298 <FIFO_EnQueue>:

FIFO_Buf_s FIFO_EnQueue(FIFO_Buf_t* FIFO_Buf , ELEMENT_TYPE Item)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	6039      	str	r1, [r7, #0]
	if(FIFO_Buf->Base == NULL || FIFO_Buf->Head == NULL || FIFO_Buf->Tail == NULL)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	689b      	ldr	r3, [r3, #8]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d007      	beq.n	80002ba <FIFO_EnQueue+0x22>
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	68db      	ldr	r3, [r3, #12]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d003      	beq.n	80002ba <FIFO_EnQueue+0x22>
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	691b      	ldr	r3, [r3, #16]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d101      	bne.n	80002be <FIFO_EnQueue+0x26>
		return FIFO_NULL;
 80002ba:	2303      	movs	r3, #3
 80002bc:	e028      	b.n	8000310 <FIFO_EnQueue+0x78>
	/* Check if FIFO is full or not */
	if(FIFO_IsFull(FIFO_Buf) == FIFO_FULL)
 80002be:	6878      	ldr	r0, [r7, #4]
 80002c0:	f7ff ffaa 	bl	8000218 <FIFO_IsFull>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d101      	bne.n	80002ce <FIFO_EnQueue+0x36>
		return FIFO_FULL;
 80002ca:	2301      	movs	r3, #1
 80002cc:	e020      	b.n	8000310 <FIFO_EnQueue+0x78>

	*(FIFO_Buf->Head) = Item;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	683a      	ldr	r2, [r7, #0]
 80002d4:	601a      	str	r2, [r3, #0]
	FIFO_Buf->Count++;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	1c5a      	adds	r2, r3, #1
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	605a      	str	r2, [r3, #4]

	/* For circular Queue */
	if(FIFO_Buf->Head == (FIFO_Buf->Base + FIFO_Buf->Length - 1))
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	68da      	ldr	r2, [r3, #12]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	6899      	ldr	r1, [r3, #8]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80002f0:	3b01      	subs	r3, #1
 80002f2:	009b      	lsls	r3, r3, #2
 80002f4:	440b      	add	r3, r1
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d104      	bne.n	8000304 <FIFO_EnQueue+0x6c>
	   FIFO_Buf->Head = FIFO_Buf->Base;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	689a      	ldr	r2, [r3, #8]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	60da      	str	r2, [r3, #12]
 8000302:	e004      	b.n	800030e <FIFO_EnQueue+0x76>
	else
		FIFO_Buf->Head++;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	1d1a      	adds	r2, r3, #4
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	60da      	str	r2, [r3, #12]

    return FIFO_NO_ERROR;
 800030e:	2300      	movs	r3, #0

}
 8000310:	4618      	mov	r0, r3
 8000312:	3708      	adds	r7, #8
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <FIFO_DeQueue>:

FIFO_Buf_s FIFO_DeQueue(FIFO_Buf_t* FIFO_Buf , ELEMENT_TYPE* Item)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
	if(FIFO_Buf->Base == NULL || FIFO_Buf->Head == NULL || FIFO_Buf->Tail == NULL)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	689b      	ldr	r3, [r3, #8]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d007      	beq.n	800033a <FIFO_DeQueue+0x22>
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	68db      	ldr	r3, [r3, #12]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d003      	beq.n	800033a <FIFO_DeQueue+0x22>
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	691b      	ldr	r3, [r3, #16]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d101      	bne.n	800033e <FIFO_DeQueue+0x26>
		return FIFO_NULL;
 800033a:	2303      	movs	r3, #3
 800033c:	e029      	b.n	8000392 <FIFO_DeQueue+0x7a>

	/* Check if FIFO is empty or not */
	if(FIFO_IsEmpty(FIFO_Buf) == FIFO_EMPTY)
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f7ff ff8b 	bl	800025a <FIFO_IsEmpty>
 8000344:	4603      	mov	r3, r0
 8000346:	2b02      	cmp	r3, #2
 8000348:	d101      	bne.n	800034e <FIFO_DeQueue+0x36>
		return FIFO_EMPTY;
 800034a:	2302      	movs	r3, #2
 800034c:	e021      	b.n	8000392 <FIFO_DeQueue+0x7a>

	*Item = *(FIFO_Buf->Tail);
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	691b      	ldr	r3, [r3, #16]
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	601a      	str	r2, [r3, #0]
	FIFO_Buf->Count--;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	1e5a      	subs	r2, r3, #1
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	605a      	str	r2, [r3, #4]

	/* For circular Queue */
	if(FIFO_Buf->Tail == (FIFO_Buf->Base + FIFO_Buf->Length - 1))
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	691a      	ldr	r2, [r3, #16]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	6899      	ldr	r1, [r3, #8]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000372:	3b01      	subs	r3, #1
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	440b      	add	r3, r1
 8000378:	429a      	cmp	r2, r3
 800037a:	d104      	bne.n	8000386 <FIFO_DeQueue+0x6e>
	    FIFO_Buf->Tail = FIFO_Buf->Base;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	689a      	ldr	r2, [r3, #8]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	611a      	str	r2, [r3, #16]
 8000384:	e004      	b.n	8000390 <FIFO_DeQueue+0x78>
	else
		FIFO_Buf->Tail++;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	691b      	ldr	r3, [r3, #16]
 800038a:	1d1a      	adds	r2, r3, #4
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	611a      	str	r2, [r3, #16]

		return FIFO_NO_ERROR;
 8000390:	2300      	movs	r3, #0

}
 8000392:	4618      	mov	r0, r3
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}

0800039a <main>:
#include "FIFO.h"



int main(void)
{
 800039a:	b580      	push	{r7, lr}
 800039c:	b08e      	sub	sp, #56	@ 0x38
 800039e:	af00      	add	r7, sp, #0
	FIFO_Buf_t myFIFO;
	ELEMENT_TYPE myBuffer[LENGTH];

	if (FIFO_Init(&myFIFO, myBuffer, LENGTH) != FIFO_NO_ERROR) {
 80003a0:	1d39      	adds	r1, r7, #4
 80003a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003a6:	2208      	movs	r2, #8
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff ff0f 	bl	80001cc <FIFO_Init>
		/* Err Handler */
		}

	FIFO_EnQueue(&myFIFO, 10);
 80003ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003b2:	210a      	movs	r1, #10
 80003b4:	4618      	mov	r0, r3
 80003b6:	f7ff ff6f 	bl	8000298 <FIFO_EnQueue>
	FIFO_EnQueue(&myFIFO, 20);
 80003ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003be:	2114      	movs	r1, #20
 80003c0:	4618      	mov	r0, r3
 80003c2:	f7ff ff69 	bl	8000298 <FIFO_EnQueue>

	ELEMENT_TYPE val;
	FIFO_DeQueue(&myFIFO, &val);
 80003c6:	463a      	mov	r2, r7
 80003c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003cc:	4611      	mov	r1, r2
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ffa2 	bl	8000318 <FIFO_DeQueue>
    /* Loop forever */
	for(;;);
 80003d4:	bf00      	nop
 80003d6:	e7fd      	b.n	80003d4 <main+0x3a>

080003d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003d8:	480d      	ldr	r0, [pc, #52]	@ (8000410 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e0:	480c      	ldr	r0, [pc, #48]	@ (8000414 <LoopForever+0x6>)
  ldr r1, =_edata
 80003e2:	490d      	ldr	r1, [pc, #52]	@ (8000418 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003e4:	4a0d      	ldr	r2, [pc, #52]	@ (800041c <LoopForever+0xe>)
  movs r3, #0
 80003e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e8:	e002      	b.n	80003f0 <LoopCopyDataInit>

080003ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ee:	3304      	adds	r3, #4

080003f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f4:	d3f9      	bcc.n	80003ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000420 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000424 <LoopForever+0x16>)
  movs r3, #0
 80003fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003fc:	e001      	b.n	8000402 <LoopFillZerobss>

080003fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000400:	3204      	adds	r2, #4

08000402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000404:	d3fb      	bcc.n	80003fe <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000406:	f000 f811 	bl	800042c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800040a:	f7ff ffc6 	bl	800039a <main>

0800040e <LoopForever>:

LoopForever:
  b LoopForever
 800040e:	e7fe      	b.n	800040e <LoopForever>
  ldr   r0, =_estack
 8000410:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000418:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800041c:	08000494 	.word	0x08000494
  ldr r2, =_sbss
 8000420:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000424:	2000001c 	.word	0x2000001c

08000428 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000428:	e7fe      	b.n	8000428 <ADC1_2_IRQHandler>
	...

0800042c <__libc_init_array>:
 800042c:	b570      	push	{r4, r5, r6, lr}
 800042e:	4d0d      	ldr	r5, [pc, #52]	@ (8000464 <__libc_init_array+0x38>)
 8000430:	4c0d      	ldr	r4, [pc, #52]	@ (8000468 <__libc_init_array+0x3c>)
 8000432:	1b64      	subs	r4, r4, r5
 8000434:	10a4      	asrs	r4, r4, #2
 8000436:	2600      	movs	r6, #0
 8000438:	42a6      	cmp	r6, r4
 800043a:	d109      	bne.n	8000450 <__libc_init_array+0x24>
 800043c:	4d0b      	ldr	r5, [pc, #44]	@ (800046c <__libc_init_array+0x40>)
 800043e:	4c0c      	ldr	r4, [pc, #48]	@ (8000470 <__libc_init_array+0x44>)
 8000440:	f000 f818 	bl	8000474 <_init>
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	10a4      	asrs	r4, r4, #2
 8000448:	2600      	movs	r6, #0
 800044a:	42a6      	cmp	r6, r4
 800044c:	d105      	bne.n	800045a <__libc_init_array+0x2e>
 800044e:	bd70      	pop	{r4, r5, r6, pc}
 8000450:	f855 3b04 	ldr.w	r3, [r5], #4
 8000454:	4798      	blx	r3
 8000456:	3601      	adds	r6, #1
 8000458:	e7ee      	b.n	8000438 <__libc_init_array+0xc>
 800045a:	f855 3b04 	ldr.w	r3, [r5], #4
 800045e:	4798      	blx	r3
 8000460:	3601      	adds	r6, #1
 8000462:	e7f2      	b.n	800044a <__libc_init_array+0x1e>
 8000464:	0800048c 	.word	0x0800048c
 8000468:	0800048c 	.word	0x0800048c
 800046c:	0800048c 	.word	0x0800048c
 8000470:	08000490 	.word	0x08000490

08000474 <_init>:
 8000474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000476:	bf00      	nop
 8000478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047a:	bc08      	pop	{r3}
 800047c:	469e      	mov	lr, r3
 800047e:	4770      	bx	lr

08000480 <_fini>:
 8000480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000482:	bf00      	nop
 8000484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000486:	bc08      	pop	{r3}
 8000488:	469e      	mov	lr, r3
 800048a:	4770      	bx	lr
