

uint32_t Task_A_flag,Task_B_flag,IRQ_flag = 0;


// Tasks Size
#define TASK_A_Stack_Size		100 //100 Byte
#define TASK_B_Stack_Size		100 //100 Byte


extern int _estack;

//main stack
unsigned int _S_MSP = &_estack;    //estack from LinkerScript
unsigned int _E_MSP ;

// Process Stack Task A Boundries
unsigned int _S_PSP_TA; //Start of PSP for Task A
unsigned int _E_PSP_TA; //End of PSP for Task A

// Process Stack Task B Boundries
unsigned int _S_PSP_TB; //Start of PSP for Task B
unsigned int _E_PSP_TB; //End of PSP for Task B


#define OS_SET_PSP(add) 			  __asm volatile("mov r0,%0 \n\t msr PSP,r0"::"r"(add))
#define OS_SWITCH_SP_to_PSP			__asm volatile("mrs r0,CONTROL \n\t mov r1,#0x02 \n\t orr r0,r0,r1 \n\t msr CONTROL,r0")
#define OS_Generate_Exception		__asm volatile("SVC #0x03")
#define OS_SWITCH_SP_to_MSP			__asm volatile("mrs r0,CONTROL \n\t mov r1,#0x05 \n\t and r0,r0,r1 \n\t msr CONTROL,r0")

enum CPU_Access_level{
	privilged,
	unprivilged
};
void Switch_CPU_Access_level(enum CPU_Access_level access_level){
	switch(access_level){
	case privilged:
	    __asm("NOP \n\t NOP \n\t NOP \n\t");
	    __asm("mrs r3,CONTROL \n\t"
	    		"lsr r3,r3,#0x01 \n\t"
	    		"lsr r3,r3,#0x01 \n\t"
	    		"msr CONTROL , r3");
	    __asm("NOP \n\t NOP \n\t NOP \n\t");
		break;
	case unprivilged:
	    __asm("NOP \n\t NOP \n\t NOP \n\t");
	    __asm("mrs r3,CONTROL \n\t"
	    		"orr r3,r3,#0x01 \n\t"
	    		"msr CONTROL , r3");
	    __asm("NOP \n\t NOP \n\t NOP \n\t");
		break;
	}

}
void SVC_Handler(){
	Switch_CPU_Access_level(privilged);
}
void IRQ_EXTI9_callback(void){

	if(IRQ_flag ==0){
		TaskA_flag = 1;
		IRQ_flag = 1;
	}else if(IRQ_flag ==1){
		TaskB_flag = 1;
		IRQ_flag = 0;
	}
}

int TaskA(int a,int b,int c){
	return a+b+c;
}

int TaskB(int a,int b,int c, int d){
	return a+b+c;
}

void Main_OS(){
	//Main Stack
	_E_MSP = (_S_MSP - 512);
	//Task B
	_S_PSP_TA = (_E_MSP - 8);
	_E_PSP_TA = (_S_PSP_TA - TASK_A_Stack_Size);

	//Task A
	_S_PSP_TB = (_E_PSP_TA - 8);
	_E_PSP_TB = (_S_PSP_TB - TASK_B_Stack_Size);

	while(1){
		__asm("nop");
		if(TaskA_flag ==1){
			// Set PSP Register = _S_PSP_TA
			OS_SET_PSP(_S_PSP_TA);

			// SP -> PSP
			OS_SWITCH_SP_to_PSP;

			// Switch_CPU Access level from privilged to unprivilged
			Switch_CPU_Access_level(unprivilged);

			TaskA_flag = TaskA(1, 2, 3);

			// Switch_CPU Access level from unprivilged to privilged
			OS_Generate_Exception;

			// SP -> MSP
			OS_SWITCH_SP_to_MSP;

		}else if(TaskB_flag == 1){
			// Set PSP Register = _S_PSP_TB
			OS_SET_PSP(_S_PSP_TB);

			// SP -> PSP
			OS_SWITCH_SP_to_PSP;

			// Switch_CPU Access level from privilged to unprivilged
			Switch_CPU_Access_level(unprivilged);

			TaskB_flag = TaskB(1, 2, 3,4);
			// Switch_CPU Access level from unprivilged to privilged
			OS_Generate_Exception;
			// SP -> MSP
			OS_SWITCH_SP_to_MSP;
	}
	}
}
int main(void)
{
	//Enable port B clock
	RCC_GPIOB_CLK_EN();
	//Enable AFIO clock
	RCC_AFIO_CLK_EN();	lcd_init();
	EXTI_PIN_CONFIG_t EXTI_cfg;
	EXTI_cfg.EXTI_PIN = EXTI9PB9;
	EXTI_cfg.TRIGGER_CASE = EXTI_TRIGGER_RISING_EDGE;
	EXTI_cfg.IRQ_HANDLER = IRQ_EXTI9_callback;
	EXTI_cfg.IRQ_EN = EXTI_IRQ_ENABLE;
	MCAL_EXTI_Init(&EXTI_cfg);

	Main_OS();
	IRQ_flag = 1;


	while(1){
		if(IRQ_flag){
			lcd_clear();
			IRQ_flag = 0;
		}
	}
}
