
Driver_GPIO_STM32_L47XXX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004b4  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000640  08000648  00001648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000640  08000640  00001648  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000640  08000640  00001648  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000640  08000648  00001648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000640  08000640  00001640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000644  08000644  00001644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00001648  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000099a  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000225  00000000  00000000  00002012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a0  00000000  00000000  00002238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000006c  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000fbd  00000000  00000000  00002344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000529  00000000  00000000  00003301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000493c  00000000  00000000  0000382a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00008166  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001a8  00000000  00000000  000081ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008c  00000000  00000000  00008354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000000 	.word	0x20000000
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08000628 	.word	0x08000628

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000004 	.word	0x20000004
 80001c8:	08000628 	.word	0x08000628

080001cc <Get_Position>:
 * =======================================================================================
  */


static uint8_t Get_Position(uint16_t GPIO_PIN_Numbre)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_PIN_Numbre)
 80001d6:	88fb      	ldrh	r3, [r7, #6]
 80001d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80001dc:	f000 80a5 	beq.w	800032a <Get_Position+0x15e>
 80001e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80001e4:	f300 80a3 	bgt.w	800032e <Get_Position+0x162>
 80001e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80001ec:	f000 809b 	beq.w	8000326 <Get_Position+0x15a>
 80001f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80001f4:	f300 809b 	bgt.w	800032e <Get_Position+0x162>
 80001f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80001fc:	f000 8091 	beq.w	8000322 <Get_Position+0x156>
 8000200:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000204:	f300 8093 	bgt.w	800032e <Get_Position+0x162>
 8000208:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800020c:	f000 8087 	beq.w	800031e <Get_Position+0x152>
 8000210:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000214:	f300 808b 	bgt.w	800032e <Get_Position+0x162>
 8000218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800021c:	d07d      	beq.n	800031a <Get_Position+0x14e>
 800021e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000222:	f300 8084 	bgt.w	800032e <Get_Position+0x162>
 8000226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800022a:	d074      	beq.n	8000316 <Get_Position+0x14a>
 800022c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000230:	dc7d      	bgt.n	800032e <Get_Position+0x162>
 8000232:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000236:	d06c      	beq.n	8000312 <Get_Position+0x146>
 8000238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800023c:	dc77      	bgt.n	800032e <Get_Position+0x162>
 800023e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000242:	d064      	beq.n	800030e <Get_Position+0x142>
 8000244:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000248:	dc71      	bgt.n	800032e <Get_Position+0x162>
 800024a:	2b80      	cmp	r3, #128	@ 0x80
 800024c:	d05d      	beq.n	800030a <Get_Position+0x13e>
 800024e:	2b80      	cmp	r3, #128	@ 0x80
 8000250:	dc6d      	bgt.n	800032e <Get_Position+0x162>
 8000252:	2b20      	cmp	r3, #32
 8000254:	dc48      	bgt.n	80002e8 <Get_Position+0x11c>
 8000256:	2b00      	cmp	r3, #0
 8000258:	dd69      	ble.n	800032e <Get_Position+0x162>
 800025a:	3b01      	subs	r3, #1
 800025c:	2b1f      	cmp	r3, #31
 800025e:	d866      	bhi.n	800032e <Get_Position+0x162>
 8000260:	a201      	add	r2, pc, #4	@ (adr r2, 8000268 <Get_Position+0x9c>)
 8000262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000266:	bf00      	nop
 8000268:	080002ef 	.word	0x080002ef
 800026c:	080002f3 	.word	0x080002f3
 8000270:	0800032f 	.word	0x0800032f
 8000274:	080002f7 	.word	0x080002f7
 8000278:	0800032f 	.word	0x0800032f
 800027c:	0800032f 	.word	0x0800032f
 8000280:	0800032f 	.word	0x0800032f
 8000284:	080002fb 	.word	0x080002fb
 8000288:	0800032f 	.word	0x0800032f
 800028c:	0800032f 	.word	0x0800032f
 8000290:	0800032f 	.word	0x0800032f
 8000294:	0800032f 	.word	0x0800032f
 8000298:	0800032f 	.word	0x0800032f
 800029c:	0800032f 	.word	0x0800032f
 80002a0:	0800032f 	.word	0x0800032f
 80002a4:	080002ff 	.word	0x080002ff
 80002a8:	0800032f 	.word	0x0800032f
 80002ac:	0800032f 	.word	0x0800032f
 80002b0:	0800032f 	.word	0x0800032f
 80002b4:	0800032f 	.word	0x0800032f
 80002b8:	0800032f 	.word	0x0800032f
 80002bc:	0800032f 	.word	0x0800032f
 80002c0:	0800032f 	.word	0x0800032f
 80002c4:	0800032f 	.word	0x0800032f
 80002c8:	0800032f 	.word	0x0800032f
 80002cc:	0800032f 	.word	0x0800032f
 80002d0:	0800032f 	.word	0x0800032f
 80002d4:	0800032f 	.word	0x0800032f
 80002d8:	0800032f 	.word	0x0800032f
 80002dc:	0800032f 	.word	0x0800032f
 80002e0:	0800032f 	.word	0x0800032f
 80002e4:	08000303 	.word	0x08000303
 80002e8:	2b40      	cmp	r3, #64	@ 0x40
 80002ea:	d00c      	beq.n	8000306 <Get_Position+0x13a>
 80002ec:	e01f      	b.n	800032e <Get_Position+0x162>
    {
        case GPIO_PIN_0:  return 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	e01e      	b.n	8000330 <Get_Position+0x164>
        case GPIO_PIN_1:  return 1;
 80002f2:	2301      	movs	r3, #1
 80002f4:	e01c      	b.n	8000330 <Get_Position+0x164>
        case GPIO_PIN_2:  return 2;
 80002f6:	2302      	movs	r3, #2
 80002f8:	e01a      	b.n	8000330 <Get_Position+0x164>
        case GPIO_PIN_3:  return 3;
 80002fa:	2303      	movs	r3, #3
 80002fc:	e018      	b.n	8000330 <Get_Position+0x164>
        case GPIO_PIN_4:  return 4;
 80002fe:	2304      	movs	r3, #4
 8000300:	e016      	b.n	8000330 <Get_Position+0x164>
        case GPIO_PIN_5:  return 5;
 8000302:	2305      	movs	r3, #5
 8000304:	e014      	b.n	8000330 <Get_Position+0x164>
        case GPIO_PIN_6:  return 6;
 8000306:	2306      	movs	r3, #6
 8000308:	e012      	b.n	8000330 <Get_Position+0x164>
        case GPIO_PIN_7:  return 7;
 800030a:	2307      	movs	r3, #7
 800030c:	e010      	b.n	8000330 <Get_Position+0x164>
        case GPIO_PIN_8:  return 8;
 800030e:	2308      	movs	r3, #8
 8000310:	e00e      	b.n	8000330 <Get_Position+0x164>
        case GPIO_PIN_9:  return 9;
 8000312:	2309      	movs	r3, #9
 8000314:	e00c      	b.n	8000330 <Get_Position+0x164>
        case GPIO_PIN_10: return 10;
 8000316:	230a      	movs	r3, #10
 8000318:	e00a      	b.n	8000330 <Get_Position+0x164>
        case GPIO_PIN_11: return 11;
 800031a:	230b      	movs	r3, #11
 800031c:	e008      	b.n	8000330 <Get_Position+0x164>
        case GPIO_PIN_12: return 12;
 800031e:	230c      	movs	r3, #12
 8000320:	e006      	b.n	8000330 <Get_Position+0x164>
        case GPIO_PIN_13: return 13;
 8000322:	230d      	movs	r3, #13
 8000324:	e004      	b.n	8000330 <Get_Position+0x164>
        case GPIO_PIN_14: return 14;
 8000326:	230e      	movs	r3, #14
 8000328:	e002      	b.n	8000330 <Get_Position+0x164>
        case GPIO_PIN_15: return 15;
 800032a:	230f      	movs	r3, #15
 800032c:	e000      	b.n	8000330 <Get_Position+0x164>
    }
    return 0;
 800032e:	2300      	movs	r3, #0
}
 8000330:	4618      	mov	r0, r3
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr

0800033c <MCAL_GPIO_Init>:
 * @retval 			-none
 * Note				-Stm32L47bRGTb0 MCU has GPIO A,B,C,D,E.H Modules
 * 					 But LQFP64 Package has only GPIO A,B,C,H,PART of E/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_PINConfig_t* PinConfig)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b086      	sub	sp, #24
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
    uint32_t position = Get_Position(PinConfig->GPIO_PinNumber);
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	881b      	ldrh	r3, [r3, #0]
 800034a:	4618      	mov	r0, r3
 800034c:	f7ff ff3e 	bl	80001cc <Get_Position>
 8000350:	4603      	mov	r3, r0
 8000352:	617b      	str	r3, [r7, #20]
    volatile uint32_t *Config_register = (position < 8) ? &GPIOx->AFR[0] : &GPIOx->AFR[1];
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	2b07      	cmp	r3, #7
 8000358:	d802      	bhi.n	8000360 <MCAL_GPIO_Init+0x24>
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	3320      	adds	r3, #32
 800035e:	e001      	b.n	8000364 <MCAL_GPIO_Init+0x28>
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	3324      	adds	r3, #36	@ 0x24
 8000364:	613b      	str	r3, [r7, #16]

    // Reset MODER, OTYPER, OSPEEDR, PUPDR, ASCR
    GPIOx->MODER   &= ~(0x3U << (position * 2));
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681a      	ldr	r2, [r3, #0]
 800036a:	697b      	ldr	r3, [r7, #20]
 800036c:	005b      	lsls	r3, r3, #1
 800036e:	2103      	movs	r1, #3
 8000370:	fa01 f303 	lsl.w	r3, r1, r3
 8000374:	43db      	mvns	r3, r3
 8000376:	401a      	ands	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	601a      	str	r2, [r3, #0]
    GPIOx->OTYPER  &= ~(0x1U << position);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	685a      	ldr	r2, [r3, #4]
 8000380:	2101      	movs	r1, #1
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	fa01 f303 	lsl.w	r3, r1, r3
 8000388:	43db      	mvns	r3, r3
 800038a:	401a      	ands	r2, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	605a      	str	r2, [r3, #4]
    GPIOx->OSPEEDR &= ~(0x3U << (position * 2));
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	689a      	ldr	r2, [r3, #8]
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	005b      	lsls	r3, r3, #1
 8000398:	2103      	movs	r1, #3
 800039a:	fa01 f303 	lsl.w	r3, r1, r3
 800039e:	43db      	mvns	r3, r3
 80003a0:	401a      	ands	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	609a      	str	r2, [r3, #8]
    GPIOx->PUPDR   &= ~(0x3U << (position * 2));
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	68da      	ldr	r2, [r3, #12]
 80003aa:	697b      	ldr	r3, [r7, #20]
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	2103      	movs	r1, #3
 80003b0:	fa01 f303 	lsl.w	r3, r1, r3
 80003b4:	43db      	mvns	r3, r3
 80003b6:	401a      	ands	r2, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	60da      	str	r2, [r3, #12]
    GPIOx->ASCR    &= ~(0x1U << position);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80003c0:	2101      	movs	r1, #1
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	fa01 f303 	lsl.w	r3, r1, r3
 80003c8:	43db      	mvns	r3, r3
 80003ca:	401a      	ands	r2, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Set MODER
    uint8_t MODE = PinConfig->GPIO_MODE & 0x0FU;            // Lower nibble for mode
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	789b      	ldrb	r3, [r3, #2]
 80003d4:	f003 030f 	and.w	r3, r3, #15
 80003d8:	73fb      	strb	r3, [r7, #15]
    uint8_t OTYPER = (PinConfig->GPIO_MODE >> 4) & 0x01U;   // Bit 4 for output type
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	789b      	ldrb	r3, [r3, #2]
 80003de:	091b      	lsrs	r3, r3, #4
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	73bb      	strb	r3, [r7, #14]
    GPIOx->MODER |= (MODE << (position * 2));
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	7bf9      	ldrb	r1, [r7, #15]
 80003ee:	697a      	ldr	r2, [r7, #20]
 80003f0:	0052      	lsls	r2, r2, #1
 80003f2:	fa01 f202 	lsl.w	r2, r1, r2
 80003f6:	431a      	orrs	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	601a      	str	r2, [r3, #0]

    // Configure based on mode
    if (MODE == GPIO_MODE_OUTPUT_PP || MODE == GPIO_MODE_OUTPUT_OD)
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
 80003fe:	2b01      	cmp	r3, #1
 8000400:	d002      	beq.n	8000408 <MCAL_GPIO_Init+0xcc>
 8000402:	7bfb      	ldrb	r3, [r7, #15]
 8000404:	2b11      	cmp	r3, #17
 8000406:	d121      	bne.n	800044c <MCAL_GPIO_Init+0x110>
    {
        GPIOx->OTYPER |= (OTYPER << position);
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	7bb9      	ldrb	r1, [r7, #14]
 800040e:	697a      	ldr	r2, [r7, #20]
 8000410:	fa01 f202 	lsl.w	r2, r1, r2
 8000414:	431a      	orrs	r2, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	605a      	str	r2, [r3, #4]
        GPIOx->OSPEEDR |= (PinConfig->GPIO_OutputSpeed << (position * 2));
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	683a      	ldr	r2, [r7, #0]
 8000420:	78d2      	ldrb	r2, [r2, #3]
 8000422:	4611      	mov	r1, r2
 8000424:	697a      	ldr	r2, [r7, #20]
 8000426:	0052      	lsls	r2, r2, #1
 8000428:	fa01 f202 	lsl.w	r2, r1, r2
 800042c:	431a      	orrs	r2, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	609a      	str	r2, [r3, #8]
        GPIOx->PUPDR |= (PinConfig->GPIO_Pull << (position * 2));
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	68db      	ldr	r3, [r3, #12]
 8000436:	683a      	ldr	r2, [r7, #0]
 8000438:	7912      	ldrb	r2, [r2, #4]
 800043a:	4611      	mov	r1, r2
 800043c:	697a      	ldr	r2, [r7, #20]
 800043e:	0052      	lsls	r2, r2, #1
 8000440:	fa01 f202 	lsl.w	r2, r1, r2
 8000444:	431a      	orrs	r2, r3
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	60da      	str	r2, [r3, #12]
 800044a:	e05f      	b.n	800050c <MCAL_GPIO_Init+0x1d0>
    }
    else if (MODE == GPIO_MODE_AF_PP || MODE == GPIO_MODE_AF_OD)
 800044c:	7bfb      	ldrb	r3, [r7, #15]
 800044e:	2b02      	cmp	r3, #2
 8000450:	d002      	beq.n	8000458 <MCAL_GPIO_Init+0x11c>
 8000452:	7bfb      	ldrb	r3, [r7, #15]
 8000454:	2b12      	cmp	r3, #18
 8000456:	d13c      	bne.n	80004d2 <MCAL_GPIO_Init+0x196>
    {
        GPIOx->OTYPER |= (OTYPER << position);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	7bb9      	ldrb	r1, [r7, #14]
 800045e:	697a      	ldr	r2, [r7, #20]
 8000460:	fa01 f202 	lsl.w	r2, r1, r2
 8000464:	431a      	orrs	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	605a      	str	r2, [r3, #4]
        GPIOx->OSPEEDR |= (PinConfig->GPIO_OutputSpeed << (position * 2));
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	683a      	ldr	r2, [r7, #0]
 8000470:	78d2      	ldrb	r2, [r2, #3]
 8000472:	4611      	mov	r1, r2
 8000474:	697a      	ldr	r2, [r7, #20]
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	fa01 f202 	lsl.w	r2, r1, r2
 800047c:	431a      	orrs	r2, r3
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	609a      	str	r2, [r3, #8]
        GPIOx->PUPDR |= (PinConfig->GPIO_Pull << (position * 2));
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	683a      	ldr	r2, [r7, #0]
 8000488:	7912      	ldrb	r2, [r2, #4]
 800048a:	4611      	mov	r1, r2
 800048c:	697a      	ldr	r2, [r7, #20]
 800048e:	0052      	lsls	r2, r2, #1
 8000490:	fa01 f202 	lsl.w	r2, r1, r2
 8000494:	431a      	orrs	r2, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	60da      	str	r2, [r3, #12]
        *Config_register &= ~(0xFU << ((position % 8) * 4));
 800049a:	693b      	ldr	r3, [r7, #16]
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	f003 0307 	and.w	r3, r3, #7
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	210f      	movs	r1, #15
 80004a8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ac:	43db      	mvns	r3, r3
 80004ae:	401a      	ands	r2, r3
 80004b0:	693b      	ldr	r3, [r7, #16]
 80004b2:	601a      	str	r2, [r3, #0]
        *Config_register |= (PinConfig->Alternate_function << ((position % 8) * 4));
 80004b4:	693b      	ldr	r3, [r7, #16]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	683a      	ldr	r2, [r7, #0]
 80004ba:	7992      	ldrb	r2, [r2, #6]
 80004bc:	4611      	mov	r1, r2
 80004be:	697a      	ldr	r2, [r7, #20]
 80004c0:	f002 0207 	and.w	r2, r2, #7
 80004c4:	0092      	lsls	r2, r2, #2
 80004c6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ca:	431a      	orrs	r2, r3
 80004cc:	693b      	ldr	r3, [r7, #16]
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	e01c      	b.n	800050c <MCAL_GPIO_Init+0x1d0>
    }
    else if (MODE == GPIO_MODE_INPUT)
 80004d2:	7bfb      	ldrb	r3, [r7, #15]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d10c      	bne.n	80004f2 <MCAL_GPIO_Init+0x1b6>
    {
        GPIOx->PUPDR |= (PinConfig->GPIO_Pull << (position * 2));
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	683a      	ldr	r2, [r7, #0]
 80004de:	7912      	ldrb	r2, [r2, #4]
 80004e0:	4611      	mov	r1, r2
 80004e2:	697a      	ldr	r2, [r7, #20]
 80004e4:	0052      	lsls	r2, r2, #1
 80004e6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ea:	431a      	orrs	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	60da      	str	r2, [r3, #12]
    }
    else if (MODE == GPIO_MODE_ANALOG_SWITCH)
    {
        GPIOx->ASCR |= (1U << position); // Enable analog switch connection
    }
}
 80004f0:	e00c      	b.n	800050c <MCAL_GPIO_Init+0x1d0>
    else if (MODE == GPIO_MODE_ANALOG_SWITCH)
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	2b13      	cmp	r3, #19
 80004f6:	d109      	bne.n	800050c <MCAL_GPIO_Init+0x1d0>
        GPIOx->ASCR |= (1U << position); // Enable analog switch connection
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004fc:	2101      	movs	r1, #1
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	fa01 f303 	lsl.w	r3, r1, r3
 8000504:	431a      	orrs	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800050a:	e7ff      	b.n	800050c <MCAL_GPIO_Init+0x1d0>
 800050c:	bf00      	nop
 800050e:	3718      	adds	r7, #24
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <MCAL_GPIO_WritePin>:
 *
 * @retval 			-none
 * Note				-none
 */
void MCAL_GPIO_WritePin	(GPIO_TypeDef *GPIOx , uint16_t PinNumber, uint8_t Value)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	460b      	mov	r3, r1
 800051e:	807b      	strh	r3, [r7, #2]
 8000520:	4613      	mov	r3, r2
 8000522:	707b      	strb	r3, [r7, #1]
	if (Value != GPIO_PIN_RESET)
 8000524:	787b      	ldrb	r3, [r7, #1]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d003      	beq.n	8000532 <MCAL_GPIO_WritePin+0x1e>
		{
			// Atomic: Write to BSRR sets the corresponding pin in 1 CPU cycle without affecting other bits
			GPIOx->BSRR = PinNumber;
 800052a:	887a      	ldrh	r2, [r7, #2]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	619a      	str	r2, [r3, #24]
			GPIOx->BSRR = PinNumber << 16U;

		 // GPIOx->ODR &= ~(PinNumber);
		}

}
 8000530:	e003      	b.n	800053a <MCAL_GPIO_WritePin+0x26>
			GPIOx->BSRR = PinNumber << 16U;
 8000532:	887b      	ldrh	r3, [r7, #2]
 8000534:	041a      	lsls	r2, r3, #16
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	619a      	str	r2, [r3, #24]
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
	...

08000548 <main>:
#include <GPIO_STM32_STM32_L47XXX_Driver.h> //



int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
    // 1. Define the Pin Configuration structure for PA5
    GPIO_PINConfig_t LedPinConfig;

    // Set up the configuration for PA5
    LedPinConfig.GPIO_PinNumber = GPIO_PIN_5; // PA5
 800054e:	2320      	movs	r3, #32
 8000550:	803b      	strh	r3, [r7, #0]
    LedPinConfig.GPIO_MODE      = GPIO_MODE_OUTPUT_PP; // Output, Push-Pull
 8000552:	2301      	movs	r3, #1
 8000554:	70bb      	strb	r3, [r7, #2]
    // CORRECTED LINE HERE:
    LedPinConfig.GPIO_OutputSpeed = GPIO_SPEED_LOW; // Low speed (sufficient for LED)
 8000556:	2300      	movs	r3, #0
 8000558:	70fb      	strb	r3, [r7, #3]
    LedPinConfig.GPIO_Pull      = GPIO_NOPULL; // No pull-up/pull-down needed for LED output
 800055a:	2300      	movs	r3, #0
 800055c:	713b      	strb	r3, [r7, #4]

    // 2. Enable the clock for GPIOA
    // This is still needed as MCAL_GPIO_Init doesn't enable the clock itself.
    RCC_GPIOA_CLK_EN();
 800055e:	4b0a      	ldr	r3, [pc, #40]	@ (8000588 <main+0x40>)
 8000560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000562:	4a09      	ldr	r2, [pc, #36]	@ (8000588 <main+0x40>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6453      	str	r3, [r2, #68]	@ 0x44

    // 3. Initialize GPIOA Pin 5 with the defined configuration
    MCAL_GPIO_Init(GPIOA, &LedPinConfig);
 800056a:	463b      	mov	r3, r7
 800056c:	4619      	mov	r1, r3
 800056e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000572:	f7ff fee3 	bl	800033c <MCAL_GPIO_Init>

    // 4. Turn ON the LED
    // Use your driver's write function to set the pin high.
    MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000576:	2201      	movs	r2, #1
 8000578:	2120      	movs	r1, #32
 800057a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800057e:	f7ff ffc9 	bl	8000514 <MCAL_GPIO_WritePin>

    // Infinite loop to keep the LED on and the program running
    while (1)
 8000582:	bf00      	nop
 8000584:	e7fd      	b.n	8000582 <main+0x3a>
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000

0800058c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800058c:	480d      	ldr	r0, [pc, #52]	@ (80005c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800058e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000590:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000594:	480c      	ldr	r0, [pc, #48]	@ (80005c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000596:	490d      	ldr	r1, [pc, #52]	@ (80005cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000598:	4a0d      	ldr	r2, [pc, #52]	@ (80005d0 <LoopForever+0xe>)
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800059c:	e002      	b.n	80005a4 <LoopCopyDataInit>

0800059e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a2:	3304      	adds	r3, #4

080005a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a8:	d3f9      	bcc.n	800059e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005aa:	4a0a      	ldr	r2, [pc, #40]	@ (80005d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005ac:	4c0a      	ldr	r4, [pc, #40]	@ (80005d8 <LoopForever+0x16>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b0:	e001      	b.n	80005b6 <LoopFillZerobss>

080005b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b4:	3204      	adds	r2, #4

080005b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b8:	d3fb      	bcc.n	80005b2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80005ba:	f000 f811 	bl	80005e0 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80005be:	f7ff ffc3 	bl	8000548 <main>

080005c2 <LoopForever>:

LoopForever:
  b LoopForever
 80005c2:	e7fe      	b.n	80005c2 <LoopForever>
  ldr   r0, =_estack
 80005c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005d0:	08000648 	.word	0x08000648
  ldr r2, =_sbss
 80005d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005d8:	2000001c 	.word	0x2000001c

080005dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005dc:	e7fe      	b.n	80005dc <ADC1_2_IRQHandler>
	...

080005e0 <__libc_init_array>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	4d0d      	ldr	r5, [pc, #52]	@ (8000618 <__libc_init_array+0x38>)
 80005e4:	4c0d      	ldr	r4, [pc, #52]	@ (800061c <__libc_init_array+0x3c>)
 80005e6:	1b64      	subs	r4, r4, r5
 80005e8:	10a4      	asrs	r4, r4, #2
 80005ea:	2600      	movs	r6, #0
 80005ec:	42a6      	cmp	r6, r4
 80005ee:	d109      	bne.n	8000604 <__libc_init_array+0x24>
 80005f0:	4d0b      	ldr	r5, [pc, #44]	@ (8000620 <__libc_init_array+0x40>)
 80005f2:	4c0c      	ldr	r4, [pc, #48]	@ (8000624 <__libc_init_array+0x44>)
 80005f4:	f000 f818 	bl	8000628 <_init>
 80005f8:	1b64      	subs	r4, r4, r5
 80005fa:	10a4      	asrs	r4, r4, #2
 80005fc:	2600      	movs	r6, #0
 80005fe:	42a6      	cmp	r6, r4
 8000600:	d105      	bne.n	800060e <__libc_init_array+0x2e>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f855 3b04 	ldr.w	r3, [r5], #4
 8000608:	4798      	blx	r3
 800060a:	3601      	adds	r6, #1
 800060c:	e7ee      	b.n	80005ec <__libc_init_array+0xc>
 800060e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000612:	4798      	blx	r3
 8000614:	3601      	adds	r6, #1
 8000616:	e7f2      	b.n	80005fe <__libc_init_array+0x1e>
 8000618:	08000640 	.word	0x08000640
 800061c:	08000640 	.word	0x08000640
 8000620:	08000640 	.word	0x08000640
 8000624:	08000644 	.word	0x08000644

08000628 <_init>:
 8000628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062a:	bf00      	nop
 800062c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800062e:	bc08      	pop	{r3}
 8000630:	469e      	mov	lr, r3
 8000632:	4770      	bx	lr

08000634 <_fini>:
 8000634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000636:	bf00      	nop
 8000638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800063a:	bc08      	pop	{r3}
 800063c:	469e      	mov	lr, r3
 800063e:	4770      	bx	lr
