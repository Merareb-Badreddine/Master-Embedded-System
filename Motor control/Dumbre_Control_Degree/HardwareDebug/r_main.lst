   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	MACRL	=	0xffff0
  26                             	MACRH	=	0xffff2
  27                             	.text
  28                             	.Ltext0:
  29                             		.section	.text.R_MAIN_UserInit,"ax",@progbits
  30                             		.global	_R_MAIN_UserInit
  32                             	_R_MAIN_UserInit:
  33                             	.LFB1:
  34                             		.file 1 "../src/r_main.c"
   1:../src/r_main.c **** /**************************************************************************************************
   2:../src/r_main.c **** * DISCLAIMER
   3:../src/r_main.c **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
   4:../src/r_main.c **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
   5:../src/r_main.c **** * applicable laws, including copyright laws. 
   6:../src/r_main.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHE
   7:../src/r_main.c **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
   8:../src/r_main.c **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
   9:../src/r_main.c **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  10:../src/r_main.c **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  11:../src/r_main.c **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  12:../src/r_main.c **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  13:../src/r_main.c **** * of this software. By using this software, you agree to the additional terms and conditions found 
  14:../src/r_main.c **** * following link:
  15:../src/r_main.c **** * http://www.renesas.com/disclaimer
  16:../src/r_main.c **** *
  17:../src/r_main.c **** * Copyright (C) 2011, 2024 Renesas Electronics Corporation. All rights reserved.
  18:../src/r_main.c **** ***************************************************************************************************
  19:../src/r_main.c **** 
  20:../src/r_main.c **** /**************************************************************************************************
  21:../src/r_main.c **** * File Name    : r_main.c
  22:../src/r_main.c **** * Version      : CodeGenerator for RL78/G14 V2.05.08.02 [03 Jun 2024]
  23:../src/r_main.c **** * Device(s)    : R5F104GF
  24:../src/r_main.c **** * Tool-Chain   : GCCRL78
  25:../src/r_main.c **** * Description  : This file implements main function.
  26:../src/r_main.c **** * Creation Date: 14/07/2025
  27:../src/r_main.c **** ***************************************************************************************************
  28:../src/r_main.c **** 
  29:../src/r_main.c **** /**************************************************************************************************
  30:../src/r_main.c **** Includes
  31:../src/r_main.c **** ***************************************************************************************************
  32:../src/r_main.c **** #include "r_cg_macrodriver.h"
  33:../src/r_main.c **** #include "r_cg_cgc.h"
  34:../src/r_main.c **** #include "r_cg_port.h"
  35:../src/r_main.c **** #include "r_cg_timer.h"
  36:../src/r_main.c **** /* Start user code for include. Do not edit comment generated here */
  37:../src/r_main.c **** /* End user code. Do not edit comment generated here */
  38:../src/r_main.c **** #include "r_cg_userdefine.h"
  39:../src/r_main.c **** 
  40:../src/r_main.c **** /**************************************************************************************************
  41:../src/r_main.c **** Global variables and functions
  42:../src/r_main.c **** ***************************************************************************************************
  43:../src/r_main.c **** /* Start user code for global. Do not edit comment generated here */
  44:../src/r_main.c **** 
  45:../src/r_main.c **** #define STEPS_PER_DEGREE   20  // DEGRE * 1800 / 90
  46:../src/r_main.c **** 
  47:../src/r_main.c **** volatile uint16_t step_counter     = 0;
  48:../src/r_main.c **** volatile uint8_t  motor_direction  = 0;
  49:../src/r_main.c **** volatile int      current_degree   = 0;
  50:../src/r_main.c **** volatile uint16_t TOTAL_STEPS_OPEN = 0;
  51:../src/r_main.c **** volatile uint16_t TOTAL_STEPS_CLOSE = 0;
  52:../src/r_main.c **** 
  53:../src/r_main.c **** /* End user code. Do not edit comment generated here */
  54:../src/r_main.c **** void R_MAIN_UserInit(void);
  55:../src/r_main.c **** void set_step(uint8_t step);
  56:../src/r_main.c **** void Dumbre_Control_Degree(int degree);
  57:../src/r_main.c **** /**************************************************************************************************
  58:../src/r_main.c **** * Function Name: main
  59:../src/r_main.c **** * Description  : This function implements main function.
  60:../src/r_main.c **** * Arguments    : None
  61:../src/r_main.c **** * Return Value : None
  62:../src/r_main.c **** ***************************************************************************************************
  63:../src/r_main.c **** int main(void)
  64:../src/r_main.c **** {
  65:../src/r_main.c ****     R_MAIN_UserInit();
  66:../src/r_main.c ****     /* Start user code. Do not edit comment generated here */
  67:../src/r_main.c **** 
  68:../src/r_main.c ****     Dumbre_Control_Degree(45);
  69:../src/r_main.c ****     while (motor_direction != 0);  //
  70:../src/r_main.c **** 
  71:../src/r_main.c ****     Dumbre_Control_Degree(25);
  72:../src/r_main.c ****     while (motor_direction != 0);  //
  73:../src/r_main.c **** 
  74:../src/r_main.c ****     Dumbre_Control_Degree(65);
  75:../src/r_main.c ****     while (motor_direction != 0);  //
  76:../src/r_main.c **** 
  77:../src/r_main.c ****     Dumbre_Control_Degree(0);
  78:../src/r_main.c ****     while (motor_direction != 0);  //
  79:../src/r_main.c **** 
  80:../src/r_main.c ****     while (1)
  81:../src/r_main.c ****        {
  82:../src/r_main.c ****              ;
  83:../src/r_main.c ****        }
  84:../src/r_main.c ****     /* End user code. Do not edit comment generated here */
  85:../src/r_main.c **** }
  86:../src/r_main.c **** 
  87:../src/r_main.c **** 
  88:../src/r_main.c **** /**************************************************************************************************
  89:../src/r_main.c **** * Function Name: R_MAIN_UserInit
  90:../src/r_main.c **** * Description  : This function adds user code before implementing main function.
  91:../src/r_main.c **** * Arguments    : None
  92:../src/r_main.c **** * Return Value : None
  93:../src/r_main.c **** ***************************************************************************************************
  94:../src/r_main.c **** void R_MAIN_UserInit(void)
  95:../src/r_main.c **** {
  35                             		.loc 1 95 0
  96:../src/r_main.c ****     /* Start user code. Do not edit comment generated here */
  97:../src/r_main.c **** 	R_TAU0_Channel0_Start();
  36                             		.loc 1 97 0
  37 0000 FC 00 00 00             		call	!!%code(_R_TAU0_Channel0_Start)
  38                             	.LVL0:
  98:../src/r_main.c ****     EI();
  39                             		.loc 1 98 0
  40                             	 ; 98 "../src/r_main.c" 1
  41 0004 71 7A FA                		ei
  42                             	 ; 0 "" 2
  99:../src/r_main.c ****     /* End user code. Do not edit comment generated here */
 100:../src/r_main.c **** }
  43                             		.loc 1 100 0
  44 0007 D7                      		ret
  45                             	.LFE1:
  47                             		.section	.text.Dumbre_Control_Degree,"ax",@progbits
  48                             		.global	_Dumbre_Control_Degree
  50                             	_Dumbre_Control_Degree:
  51                             	.LFB2:
 101:../src/r_main.c **** 
 102:../src/r_main.c **** /* Start user code for adding. Do not edit comment generated here */
 103:../src/r_main.c **** /* End user code. Do not edit comment generated here */
 104:../src/r_main.c **** void Dumbre_Control_Degree(int target_degree)
 105:../src/r_main.c **** {
  52                             		.loc 1 105 0
  53                             	.LVL1:
  54 0000 A8 04                   		movw	ax, [sp+4]
  55 0002 BD F0                   		movw	r8, ax
 106:../src/r_main.c ****     if (target_degree > current_degree) {
  56                             		.loc 1 106 0
  57 0004 AF 00 00                		movw	ax, !_current_degree
  58 0007 BD F2                   		movw	r10, ax
  59 0009 AD F0                   		movw	ax, r8
  60 000b 46 F2                   		cmpw	ax, r10
  61 000d 71 FF                   		 xor1	CY, a.7
  62 000f 71 77 F3                		 xor1	CY, r11.7
  63 0012 61 E3                   		 skh
  64 0014 EC 38 00 00             		 br	!!.L3
 107:../src/r_main.c ****     	TOTAL_STEPS_OPEN = (uint16_t)((target_degree - current_degree) * STEPS_PER_DEGREE);
  65                             		.loc 1 107 0
  66 0018 22 00 00                		subw	ax, !_current_degree
  67 001b BD F2                   		movw	r10, ax
  68 001d AD F2                   		movw	ax, r10
  69 001f 32 14 00                		movw	bc, #20
  70 0022 CE FB 02                		mulh ;mulhi3_g14 ax,r10,#20
  71 0025 BF 00 00                		movw	!_TOTAL_STEPS_OPEN, ax
 108:../src/r_main.c ****         step_counter = 0;
  72                             		.loc 1 108 0
  73 0028 F6                      		clrw	ax
  74 0029 BF 00 00                		movw	!_step_counter, ax
 109:../src/r_main.c ****         motor_direction = 1;
  75                             		.loc 1 109 0
  76 002c E5 00 00                		oneb	!_motor_direction
 110:../src/r_main.c ****         current_degree = target_degree;
  77                             		.loc 1 110 0
  78 002f AD F0                   		movw	ax, r8
  79 0031 BF 00 00                		movw	!_current_degree, ax
  80 0034 EC 6C 00 00             		br	!!.L2
  81                             	.LVL2:
  82                             	.L3:
 111:../src/r_main.c ****     }
 112:../src/r_main.c ****     else if (target_degree < current_degree) {
  83                             		.loc 1 112 0
  84 0038 AF 00 00                		movw	ax, !_current_degree
  85                             	.LVL3:
  86 003b BD F2                   		movw	r10, ax
  87 003d AD F0                   		movw	ax, r8
  88 003f 46 F2                   		cmpw	ax, r10
  89 0041 71 FF                   		 xor1	CY, a.7
  90 0043 71 77 F3                		 xor1	CY, r11.7
  91 0046 61 C8                   		 skc
  92 0048 EC 6C 00 00             		 br	!!.L2
  93                             	.LVL4:
 113:../src/r_main.c ****         TOTAL_STEPS_CLOSE = (uint16_t)((current_degree - target_degree) * STEPS_PER_DEGREE);
  94                             		.loc 1 113 0
  95 004c AF 00 00                		movw	ax, !_current_degree
  96                             	.LVL5:
  97 004f 26 F0                   		subw	ax, r8
  98 0051 BD F2                   		movw	r10, ax
  99 0053 AD F2                   		movw	ax, r10
 100 0055 32 14 00                		movw	bc, #20
 101 0058 CE FB 02                		mulh ;mulhi3_g14 ax,r10,#20
 102 005b BF 00 00                		movw	!_TOTAL_STEPS_CLOSE, ax
 114:../src/r_main.c ****         step_counter = 0;
 103                             		.loc 1 114 0
 104 005e F6                      		clrw	ax
 105 005f BF 00 00                		movw	!_step_counter, ax
 115:../src/r_main.c ****         motor_direction = 2;
 106                             		.loc 1 115 0
 107 0062 51 02                   		mov	a, #2
 108 0064 9F 00 00                		mov	!_motor_direction, a
 116:../src/r_main.c ****         current_degree = target_degree;
 109                             		.loc 1 116 0
 110 0067 AD F0                   		movw	ax, r8
 111 0069 BF 00 00                		movw	!_current_degree, ax
 112                             	.LVL6:
 113                             	.L2:
 117:../src/r_main.c ****     }
 118:../src/r_main.c **** }
 114                             		.loc 1 118 0
 115 006c D7                      		ret
 116                             	.LFE2:
 118                             		.section	.text.main,"ax",@progbits
 119                             		.global	_main
 121                             	_main:
 122                             	.LFB0:
  64:../src/r_main.c ****     R_MAIN_UserInit();
 123                             		.loc 1 64 0
 124                             		; start of function
 125                             		; outgoing: 2 bytes
 126                             		; uses ES register
 127 0000 20 02                   		subw	sp, #2
 128                             	.LCFI0:
  65:../src/r_main.c ****     /* Start user code. Do not edit comment generated here */
 129                             		.loc 1 65 0
 130 0002 FC 00 00 00             		call	!!%code(_R_MAIN_UserInit)
 131                             	.LVL7:
  68:../src/r_main.c ****     while (motor_direction != 0);  //
 132                             		.loc 1 68 0
 133 0006 30 2D 00                		movw	ax, #45
 134 0009 B8 00                   		movw	[sp], ax
 135 000b FC 00 00 00             		call	!!%code(_Dumbre_Control_Degree)
 136                             	.LVL8:
 137                             	.L6:
  69:../src/r_main.c **** 
 138                             		.loc 1 69 0 discriminator 1
 139 000f D5 00 00                		cmp0	!_motor_direction
 140 0012 61 E8                   		 skz
 141 0014 EC 0F 00 00             		 br	!!.L6
  71:../src/r_main.c ****     while (motor_direction != 0);  //
 142                             		.loc 1 71 0
 143 0018 30 19 00                		movw	ax, #25
 144 001b B8 00                   		movw	[sp], ax
 145 001d FC 00 00 00             		call	!!%code(_Dumbre_Control_Degree)
 146                             	.LVL9:
 147                             	.L7:
  72:../src/r_main.c **** 
 148                             		.loc 1 72 0 discriminator 1
 149 0021 D5 00 00                		cmp0	!_motor_direction
 150 0024 61 E8                   		 skz
 151 0026 EC 21 00 00             		 br	!!.L7
  74:../src/r_main.c ****     while (motor_direction != 0);  //
 152                             		.loc 1 74 0
 153 002a 30 41 00                		movw	ax, #65
 154 002d B8 00                   		movw	[sp], ax
 155 002f FC 00 00 00             		call	!!%code(_Dumbre_Control_Degree)
 156                             	.LVL10:
 157                             	.L8:
  75:../src/r_main.c **** 
 158                             		.loc 1 75 0 discriminator 1
 159 0033 D5 00 00                		cmp0	!_motor_direction
 160 0036 61 E8                   		 skz
 161 0038 EC 33 00 00             		 br	!!.L8
  77:../src/r_main.c ****     while (motor_direction != 0);  //
 162                             		.loc 1 77 0
 163 003c F6                      		clrw	ax
 164 003d B8 00                   		movw	[sp], ax
 165 003f FC 00 00 00             		call	!!%code(_Dumbre_Control_Degree)
 166                             	.LVL11:
 167                             	.L9:
  78:../src/r_main.c **** 
 168                             		.loc 1 78 0 discriminator 1
 169 0043 D5 00 00                		cmp0	!_motor_direction
 170 0046 61 E8                   		 skz
 171 0048 EC 43 00 00             		 br	!!.L9
 172                             	.L10:
  83:../src/r_main.c ****     /* End user code. Do not edit comment generated here */
 173                             		.loc 1 83 0 discriminator 1
 174 004c EC 4C 00 00             		br	!!.L10
 175                             	.LFE0:
 177                             		.section	.text.set_step,"ax",@progbits
 178                             		.global	_set_step
 180                             	_set_step:
 181                             	.LFB3:
 119:../src/r_main.c **** 
 120:../src/r_main.c **** 
 121:../src/r_main.c **** void set_step(uint8_t step) {
 182                             		.loc 1 121 0
 183                             	.LVL12:
 184 0000 88 04                   		mov	a, [sp+4]
 185 0002 9D F0                   		mov	r8, a
 122:../src/r_main.c ****     switch (step) {
 186                             		.loc 1 122 0
 187 0004 4A F0 01                		cmp	r8, #1
 188 0007 61 F8                   		 sknz
 189 0009 EC 3F 00 00             		 br	!!.L13
 190 000d D4 F0                   		cmp0	r8
 191 000f 61 F8                   		 sknz
 192 0011 EC 2B 00 00             		 br	!!.L14
 193 0015 4A F0 02                		cmp	r8, #2
 194 0018 61 F8                   		 sknz
 195 001a EC 53 00 00             		 br	!!.L15
 196 001e 4A F0 03                		cmp	r8, #3
 197 0021 61 F8                   		 sknz
 198 0023 EC 67 00 00             		 br	!!.L16
 199 0027 EC 77 00 00             		br	!!.L11
 200                             	.L14:
 123:../src/r_main.c ****         case 0: P1_bit.no0 = 1; P1_bit.no1 = 0; P1_bit.no2 = 0; P1_bit.no3 = 1; break;
 201                             		.loc 1 123 0
 202 002b 71 00 01 FF             		set1	!-255.0
 203 002f 71 18 01 FF             		clr1	!-255.1
 204 0033 71 28 01 FF             		clr1	!-255.2
 205 0037 71 30 01 FF             		set1	!-255.3
 206 003b EC 77 00 00             		br	!!.L11
 207                             	.L13:
 124:../src/r_main.c ****         case 1: P1_bit.no0 = 1; P1_bit.no1 = 1; P1_bit.no2 = 0; P1_bit.no3 = 0; break;
 208                             		.loc 1 124 0
 209 003f 71 00 01 FF             		set1	!-255.0
 210 0043 71 10 01 FF             		set1	!-255.1
 211 0047 71 28 01 FF             		clr1	!-255.2
 212 004b 71 38 01 FF             		clr1	!-255.3
 213 004f EC 77 00 00             		br	!!.L11
 214                             	.L15:
 125:../src/r_main.c ****         case 2: P1_bit.no0 = 0; P1_bit.no1 = 1; P1_bit.no2 = 1; P1_bit.no3 = 0; break;
 215                             		.loc 1 125 0
 216 0053 71 08 01 FF             		clr1	!-255.0
 217 0057 71 10 01 FF             		set1	!-255.1
 218 005b 71 20 01 FF             		set1	!-255.2
 219 005f 71 38 01 FF             		clr1	!-255.3
 220 0063 EC 77 00 00             		br	!!.L11
 221                             	.L16:
 126:../src/r_main.c ****         case 3: P1_bit.no0 = 0; P1_bit.no1 = 0; P1_bit.no2 = 1; P1_bit.no3 = 1; break;
 222                             		.loc 1 126 0
 223 0067 71 08 01 FF             		clr1	!-255.0
 224 006b 71 18 01 FF             		clr1	!-255.1
 225 006f 71 20 01 FF             		set1	!-255.2
 226 0073 71 30 01 FF             		set1	!-255.3
 227                             	.L11:
 127:../src/r_main.c ****     }
 128:../src/r_main.c **** }
 228                             		.loc 1 128 0
 229 0077 D7                      		ret
 230                             	.LFE3:
 232                             		.global	_TOTAL_STEPS_CLOSE
 233                             		.section	.bss.TOTAL_STEPS_CLOSE,"aw",@nobits
 234                             		.balign 2
 237                             	_TOTAL_STEPS_CLOSE:
 238 0000 00 00                   		.zero	2
 239                             		.global	_TOTAL_STEPS_OPEN
 240                             		.section	.bss.TOTAL_STEPS_OPEN,"aw",@nobits
 241                             		.balign 2
 244                             	_TOTAL_STEPS_OPEN:
 245 0000 00 00                   		.zero	2
 246                             		.global	_current_degree
 247                             		.section	.bss.current_degree,"aw",@nobits
 248                             		.balign 2
 251                             	_current_degree:
 252 0000 00 00                   		.zero	2
 253                             		.global	_motor_direction
 254                             		.section	.bss.motor_direction,"aw",@nobits
 257                             	_motor_direction:
 258 0000 00                      		.zero	1
 259                             		.global	_step_counter
 260                             		.section	.bss.step_counter,"aw",@nobits
 261                             		.balign 2
 264                             	_step_counter:
 265 0000 00 00                   		.zero	2
 320                             	.Letext0:
 321                             		.file 2 "C:/Users/badreddine.merareb/e2_studio/Workspace_stepper_Motor/Control_Dumber_Degree/gener
 322                             		.file 3 "../src/r_cg_macrodriver.h"
 323                             		.file 4 "../src/r_cg_timer.h"
